# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
	default $http_x_forwarded_proto;
	''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
	default upgrade;
	''      '';
}

gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

access_log /proc/self/fd/1;
error_log /proc/self/fd/2;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;
	return 503;
	server_tokens off; # Hide the nginx version
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
upstream {{ $host }} {
{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $container.Addresses 0 }}
			# {{$container.Name}}
			server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}
	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $container.Env.VIRTUAL_PORT }}
		{{ range $address := .Addresses }}
			{{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
				# {{$container.Name}}
				server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $address := $container.Addresses }}
			{{ if eq $address.Port "80" }}
			# {{$container.Name}}
			server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
}

server {
	{{ range $index, $container := $containers }}
		{{ if and ($container.Env.SSL_FILENAME) ( eq $index 0 ) }}
			listen 443 ssl;
			ssl_certificate /etc/nginx/ssl/{{ $container.Env.SSL_FILENAME }}.crt;
			ssl_certificate_key /etc/nginx/ssl/{{ $container.Env.SSL_FILENAME }}.key;
		{{ end }}
	{{ end }}
	server_name {{ $host }};

	location / {
		{{ range $index, $container := $containers }}
			{{ if and ( $container.Env.HTPASSWD_FILENAME ) ( eq $index 0 ) }}
				auth_basic "Restricted";
				auth_basic_user_file /etc/nginx/htpasswd/{{ $container.Env.HTPASSWD_FILENAME }}.htpasswd;
			{{ end }}

 			{{ if and ($container.Env.ROOT_REDIRECT ) ( eq $index 0 ) }}
                        if ( $request_uri = "/" ) {
                                return 301 http://$server_name/{{ $container.Env.ROOT_REDIRECT }};
                        }
                        {{ end }}

		{{ end }}

		proxy_pass http://{{ $host }};
	}

	{{ range $container := $containers }}
		{{ if $container.Env.DOCKER_REGISTRY }}
			location /_ping {
				auth_basic off;
				proxy_pass http://{{ $host }};
			}

			location /v1/_ping {
				auth_basic off;
				proxy_pass http://{{ $host }};
			}
		{{ end }}

		{{/* Set the Nginx client_max_body_size option from environment variables */}}
		{{ if $container.Env.MAX_UPLOAD_SIZE }}
			client_max_body_size {{ $container.Env.MAX_UPLOAD_SIZE }};
		{{ end }}
	{{ end }}
}

{{ range $index, $container := $containers }}
	{{ if and ($container.Env.SSL_REDIRECT) (eq $index 0) }}
	server {
		server_name {{ $host }};
		return         301 https://$server_name$request_uri;
	}
	{{ end }}
{{ end }}

{{ end }}
